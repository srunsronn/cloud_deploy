name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-2
  MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_DB: ${{ secrets.MYSQL_DB }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: terraform apply -auto-approve

  upload-docker-image:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build and Push Docker image
        run: |
          docker build -t todo-list-app .
          docker tag todo-list-app:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest
          docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest

  docker-deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: upload-docker-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key for EC2
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy Application to EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "Deploying application to EC2 instance..."
            if ! command -v docker &> /dev/null; then
              sudo yum update -y
              sudo yum install -y docker
              sudo service docker start
              sudo usermod -aG docker ec2-user
            fi
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}
            docker image prune -f
            docker pull ${{ secrets.ECR_REPOSITORY_URI }}:latest
            docker stop app || true
            docker rm app || true
            docker run --env MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
                       --env MYSQL_USER=${{ secrets.MYSQL_USER }} \
                       --env MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }} \
                       --env MYSQL_DB=${{ secrets.MYSQL_DB }} \
                       -d -p 3000:3000 --name app ${{ secrets.ECR_REPOSITORY_URI }}:latest
            echo "Application deployed successfully!"
          EOF
