#  name: CI/CD Pipeline
#  on:
#  push:
#  branches:- main
#  pull_request:
#  branches:- main
# jobs:
#     deploy:
#         runs-on: ubuntu-latest
#         steps:
#             - name: Configure AWS Credentials
#               uses: aws-actions/configure-aws-credentials@v2
#               with:
#                   aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#                   aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#                   aws-region: ap-southeast-1

#             - name: Deploy to EC2
#               uses: appleboy/ssh-action@master
#               env:
#                   MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
#                   MYSQL_USER: ${{ secrets.MYSQL_USER }}
#                   MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
#                   MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
#               with:
#                   host: ${{ secrets.EC2_HOST }}
#                   username: ec2-user
#                   key: ${{ secrets.EC2_SSH_KEY }}
#                   envs: MYSQL_HOST,MYSQL_USER,MYSQL_PASSWORD,MYSQL_DATABASE
#                   script: |
#                       # Navigate to home directory
#                       cd /home/ec2-user

#                       # Gracefully stop the existing container if it exists
#                       if sudo docker ps -q -f name=brave_lumiere; then
#                         echo "Stopping existing container..."
#                         sudo docker stop brave_lumiere
#                         sudo docker rm brave_lumiere
#                       fi

#                       # Clean up unused Docker images to free space
#                       sudo docker system prune -f

#                       # Remove old project directory
#                       if [ -d "cloud-computing-project" ]; then
#                         sudo rm -rf cloud-computing-project
#                       fi

#                       # Clone the latest code
#                       git clone https://github.com/g3-cloud-computing-project/cloud-computing-project.git
#                       cd cloud-computing-project

#                       # Create .env file
#                       cat > .env << EOF
#                       DB_HOST=${MYSQL_HOST}
#                       DB_USER=${MYSQL_USER}
#                       DB_PASSWORD=${MYSQL_PASSWORD}
#                       DB_NAME=${MYSQL_DATABASE}
#                       PORT=3000
#                       EOF

#                       # Build new Docker image
#                       echo "Building Docker image..."
#                       sudo docker build -t cloud-computing-project:latest . || exit 1

#                       # Run new container
#                       echo "Starting new container..."
#                       sudo docker run -d \
#                         --name brave_lumiere \
#                         --restart unless-stopped \
#                         -p 80:3000 \
#                         -e DB_HOST="${MYSQL_HOST}" \
#                         -e DB_USER="${MYSQL_USER}" \
#                         -e DB_PASSWORD="${MYSQL_PASSWORD}" \
#                         -e DB_NAME="${MYSQL_DATABASE}" \
#                         -e PORT=3000 \
#                         cloud-computing-project:latest

#                       # Verify container is running
#                       if ! sudo docker ps -q -f name=brave_lumiere; then
#                         echo "Container failed to start!"
#                         sudo docker logs brave_lumiere
#                         exit 1
#                       fi

#                       # Wait for application to start
#                       echo "Waiting for application to start..."
#                       sleep 10

#                       # Test application
#                       if curl -f http://localhost:80 >/dev/null 2>&1; then
#                         echo "Application is running successfully!"
#                       else
#                         echo "Application failed to start properly"
#                         sudo docker logs brave_lumiere
#                         exit 1
#                       fi

#                       # Test MySQL connection using Node.js
#                       echo "Testing MySQL connection..."
#                       sudo docker exec brave_lumiere sh -c 'node -e "
#                         const mysql = require('\''mysql2'\'');
#                         const conn = mysql.createConnection({
#                           host: process.env.DB_HOST,
#                           user: process.env.DB_USER,
#                           password: process.env.DB_PASSWORD,
#                           database: process.env.DB_NAME
#                         });
#                         conn.connect((err) => {
#                           if (err) {
#                             console.error(err);
#                             process.exit(1);
#                           } else {
#                             console.log('\''MySQL connection successful'\'');
#                             process.exit(0);
#                           }
#                         });
#                       "' || {
#                         echo "MySQL connection failed!"
#                         exit 1
#                       }

name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  AWS_REGION: ap-southeast-2
  MYSQL_HOST: ${{ secrete.MYSQL_HOST }}
  MYSQL_USER: ${{ secrets.MYSQL_USER }}
  MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
  MYSQL_DB: ${{ secrets.MYSQL_DB }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build  # Ensure Terraform runs after the build is successful

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.8  # Specify the Terraform version

      - name: Initialize Terraform
        run: terraform init

      - name: Validate Terraform configuration
        run: terraform validate

      - name: Apply Terraform deployment
        run: terraform apply

  upload-docker-image:
    runs-on: ubuntu-latest
    needs: deploy-infrastructure 

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}


      # - name: Build and Push Docker image
      #   run: |
      #     docker build -t todo-list-app .
      #     docker tag todo-list-app:latest ${{ env.ECR_REPOSITORY_URI }}:latest
      #     docker push ${{ env.ECR_REPOSITORY_URI }}:latest

  docker-deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: upload-docker-image

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH key for EC2
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      - name: Deploy Application to EC2
        run: |
          echo "SSH into EC2 instance at IP: ${{ secrets.EC2_HOST }}"
          
          # SSH into EC2 instance to deploy application
          ssh -o StrictHostKeyChecking=no -i private-key.pem ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
            set -e
            echo "Deploying application to EC2 instance..."

            # Ensure Docker is installed
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi

            # Log in to Amazon ECR again to get a fresh authentication token
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY_URI }}

            # Clean up old images
            docker image prune -f

            # Pull latest image
            docker pull ${{ env.ECR_REPOSITORY_URI }}:latest

            # Stop and remove the old container
            docker stop app || true
            docker rm app || true

            # Start the new container
            docker run --env MYSQL_HOST=${{env.MYSQL_HOST}} \
                       --env MYSQL_PORT=${{env.MYSQL_PORT}} \
                       --env MYSQL_USER=${{env.MYSQL_USER}} \
                       --env MYSQL_PASSWORD=${{env.MYSQL_PASSWORD}} \
                       --env MYSQL_DB=${{env.MYSQL_DB}} \
                       -d -p 3000:3000 --name app ${{ env.ECR_REPOSITORY_URI }}:latest

            echo "Application deployed successfully!"
            docker ps
            docker logs app
          EOF


          