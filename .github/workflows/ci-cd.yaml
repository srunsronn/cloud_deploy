name: CI/CD Pipeline

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

env:
    AWS_REGION: ap-southeast-2
    ECR_REPOSITORY_URI: ${{ secrets.AWS_ECR_REPOSITORY_URI }}
    MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
    MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
    MYSQL_USER: ${{ secrets.MYSQL_USER }}
    MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
    MYSQL_DB: ${{ secrets.MYSQL_DB }}

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Node.js
              uses: actions/setup-node@v3
              with:
                  node-version: '20'

            - name: Install dependencies
              run: npm install

            - name: Run tests
              run: npx jest # Use npx to run Jest

    deploy-infrastructure:
        runs-on: ubuntu-latest
        needs: build # Ensure Terraform runs after the build is successful

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Terraform
              uses: hashicorp/setup-terraform@v2
              with:
                  terraform_version: 1.5.0 # Specify the Terraform version

            - name: Configure Terraform Cloud API Token
              run: |
                  mkdir -p ~/.terraform.d
                  echo "{\"credentials\":{\"app.terraform.io\":{\"token\":\"${{ secrets.TF_API_TOKEN }}\"}}}" > ~/.terraform.d/credentials.tfrc.json

            - name: Initialize Terraform
              working-directory: ./terraform
              run: terraform init

            - name: Validate Terraform configuration
              working-directory: ./terraform
              run: terraform validate

            - name: Apply Terraform deployment
              working-directory: ./terraform
              run: terraform apply -auto-approve

    upload-docker-image:
        runs-on: ubuntu-latest
        needs: deploy-infrastructure

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up Docker
              uses: docker/setup-buildx-action@v2

            - name: Configure AWS CLI
              uses: aws-actions/configure-aws-credentials@v1
              with:
                  aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
                  aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
                  aws-region: ${{ env.AWS_REGION }}

            - name: Login to Amazon ECR
              uses: aws-actions/amazon-ecr-login@v1

            - name: Build and Push Docker image
              run: |
                  docker build -t my-app-image .
                  docker tag my-app-image:latest ${{ env.ECR_REPOSITORY_URI }}:latest
                  docker push ${{ env.ECR_REPOSITORY_URI }}:latest

    docker-deploy-to-ec2:
        runs-on: ubuntu-latest
        needs: upload-docker-image

        steps:
            - name: Checkout code
              uses: actions/checkout@v3

            - name: Set up SSH key for EC2
              uses: webfactory/ssh-agent@v0.5.3
              with:
                  ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

            - name: Deploy Application to EC2
              run: |
                  echo "SSH into EC2 instance at IP: ${{ secrets.EC2_HOST }}"

                  # SSH into EC2 instance to deploy application
                  ssh -o StrictHostKeyChecking=no -i ${{ secrets.EC2_SSH_PRIVATE_KEY }} ubuntu@${{ secrets.EC2_HOST }} << 'EOF'
                    set -e
                    echo "Deploying application to EC2 instance..."

                    # Ensure Docker is installed
                    if ! command -v docker &> /dev/null; then
                      sudo apt-get update
                      sudo apt-get install -y docker.io
                      sudo systemctl start docker
                      sudo systemctl enable docker
                    fi

                    # Log in to Amazon ECR again to get a fresh authentication token
                    aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | sudo docker login --username AWS --password-stdin ${{ secrets.AWS_ECR_REPOSITORY_URI }}

                    # Clean up old images
                    docker image prune -f

                    # Pull latest image
                    docker pull ${{ env.ECR_REPOSITORY_URI }}:latest

                    # Stop and remove the old container
                    docker stop app || true
                    docker rm app || true

                    # Start the new container
                    docker run --env MYSQL_HOST=${{env.MYSQL_HOST}} \
                               --env MYSQL_PORT=${{env.MYSQL_PORT}} \
                               --env MYSQL_USER=${{env.MYSQL_USER}} \
                               --env MYSQL_PASSWORD=${{env.MYSQL_PASSWORD}} \
                               --env MYSQL_DB=${{env.MYSQL_DB}} \
                               -d -p 3000:3000 --name app ${{ env.ECR_REPOSITORY_URI }}:latest

                    echo "Application deployed successfully!"
                    docker ps
                    docker logs app
                  EOF
